import { Triangle2D } from "../source/graphics/geometries/Triangle2D";
import { V3 } from "../source/math/v3";

beforeEach(() => {
  console.log('before')
});

afterEach(() => {
  console.log('after');
});


// first, check if we created the triangle as we expected

test("create Triangle2D", () => {
  const t2D = new Triangle2D(1, 1, "'cyan");  // a very tiny triangle
  expect(t2D.primitives.length).toBe(1);
  const tri = t2D.primitives[0];

  // console.log(tri)
  expect(tri.a.xyz).toStrictEqual([0, 0, 0]);
  expect(tri.b.xyz).toStrictEqual([1, 0, 0]);
  expect(tri.c.xyz).toStrictEqual([0, 1, 0]);

  // for [[0,0],[1,0],[0,1]], centroid is [.3333,.3333] // wolframalpha
  // console.log("centroid", t2D.triangles[0].centroid);

  // we are at the origin position, haven't moved.
  t2D.primitives[0].reCalculatePosition(V3.zero, V3.zero, V3.zero);

  expect(t2D.primitives[0].centroid.x).toBeCloseTo(0.3333);
  expect(t2D.primitives[0].centroid.y).toBeCloseTo(0.3333);

  // console.log("normal", t2D.triangles[0].normal);
  expect(t2D.primitives[0].normal.xyz).toStrictEqual([0, 0, 1]);
});

