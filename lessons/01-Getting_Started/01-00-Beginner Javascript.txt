<module>01-Beginner Javascript
<lesson>00-Information about this course
<shortdesc>This lesson is introduction and housekeeping. You will start programming in the next lesson.

<p> first line?   this is #emp#_ text (underscore).   this is ^bold^ text. (caret)  this is `code` text. (backtick)   this is <key>ctrl+k</key> text  < key > ctrl+k < / key > 

<break>









<title>Welcome to GameCode

<run(src=logo.ts)>

<p(video=intro.webm)>We all #consume# video games, this course is going to help you learn how to #make# one.  It's a great hobby, and maybe even a career. But there is a lot to learn.

<p>There are already many great courses to help you learn how to program.  This one is a bit different in three ways.  
















<break>
<p>First, we are going to teach you high school math and physics, except you won't notice because we are teaching you how to write video games.
<p> Second, we are going to start at the beginning, explaining how computer graphics work at the lowest hardware and software levels, and how programmers put programs together.  
<p> And third, we are going to encourage you to break out of this course and write your games with professional tools in the real world







<break>
<p>Here's the thing. Writing even a simple game takes serious math and programming skills, and knowledge about how computers work.  There's no shortcut.  

<p>Video games are built on math and physics. Computer graphics rely on algebra, functions, vectors, matrices, trigonometry, and more.  Making movements look realistic needs physics, and that means a bit of calculus.

<p>Game #design# adds another layer. Making a game fun and engaging requires many of the disciplines of system engineering, such as probability, communications, information theory, and feedback.  











<break>
<p> So we wrote a programming course that teaches you math and physics, and of course programming.  We will cover most of the math and physics you need for grades 10 and 11. We will teach you some serious programming skills. And we will show you how to use the editors and compilers that programmers use.







<subtitle>About this course

<p>We are a ^Community of Learners^.  We are not a day-care or an after-school program. We learn at our own pace, following our own interests, choosing our own projects, for our own reasons.  We learn from each other and teach each other. We collaborate on projects, we follow our curiosity, and we experiment with new ideas. 



<p(img=discord.jpg)>We use DISCORD as our meeting place, for getting help, sharing what we know, and showing off our awesomeness. 
<p>Discord is an invitation-only service.  If you do not already have an account, you should join.  Then you will be able to use [this invitation link| this invitation link |https://discord.gg/jCjecSG ] to join our channel.












<break>
<p>If you are joining this course as part of a school course or as a cohort of learners, then you will be assigned a ^proctor^.  Their role is to ensure that you have fully learned each module before starting the next.  

<p>This module has a half-dozen lessons and several exercises, when you believe you have mastered them then you will chat with your proctor on Discord, share your code, and demonstrate your mastery.  Your proctor will then admit you into the next module.















<break>
<p>This style of learning is called a [Keller Plan | Keller Plan | https://en.wikipedia.org/wiki/Keller_Plan].  The key elements are
<p(bullet)>Written materials.
<p(bullet)>Self-paced instruction.
<p(bullet)>Units of content.
<p(bullet)>Mastery of each unit before advancing.
<p(bullet)>Proctors.






<break>
<p>When you have reached the end of these lessons, you will be ready to join the worldwide community of JavaScript programmers and game developers.  You will have the skills and confidence to continue learning with them. And of course, you will have written some awesome games.



<break>
<p>Feel free to invite your real-world friends.  Everything is totally free. 

























<subtitle>Beginner Game Engines
<p(video=wolf.webm)>Many 'Learn to Code' camps use drag-and-drop "toy" languages like [Scratch|Scratch|https://scratch.mit.edu/] or [GameMaker|Game Maker|https://www.yoyogames.com/gamemaker].  That's not entirely a bad thing, because you get to create amazing things, quickly.  
<p>The video on the right is a homework assignment in the third week of the free course
^Introduction to Programming and Animation with Alice^ from [Coursera | Coursera | https://www.coursera.org/learn/introtoalice], focusing on camera management across multiple scenes. It's wonderful and amazing. You won't be able to do that after three weeks here.

<break>
<p>But at the end of that course, students were hitting the limits of the Alice language. They had not seen anything outside the friendly Alice environment. They had not seen a text editor or a programming language. They had no foundation to move to another game engine.

<p>So we're going to start at the beginning and build a solid foundation of basic knowledge.  It won't be fancy at first, but it will be real.








<break>
<p(mindset)> Hi, I'm your learning coach.  Don't be scared.  This course also provides a beginner environment - those two boxes on the right.  But we are also going to help you escape out, get you set up with real tools, and show you how to write games without us.
<p(mindset)>That means you CANNOT run this course on a tablet or Chromebook.  You need a computer that you can program on.   









<subtitle>JavaScript

<p(img=javascript.png)>
There are many programming languages because each is good at different things.  The language we will be working with is called [JavaScript|JavaScript|https://developer.mozilla.org/en-US/docs/Web/JavaScript]. <break>
<p> JavaScript runs in your browser, which makes it particularly good for writing web-based programs. It runs in every web page you visit, you are surrounded by Javascript.  

<break>
<p>JavaScript is also used for connected smart devices - the "Internet of Things" (IOT) and is embedded in devices around you. Many apps on your phone are written in JavaScript using a library called [Cordova | cordova | https://cordova.apache.org/].
<p>Javascript is the language of [immersive media|immersive media|https://immersiveweb.dev/]. As I write this in 2021, JavaScript is the target language for front-edge development of virtual reality and augmented reality.  



<break>
<p(history)>I tell stories about history.  In the very early days, web pages were all static. 
Javascript was started in 1995 as a simple language that could run in a browser, and it is the reason that anything in the browser responds to your mouse.  
<p>But JavaScript was cobbled together in a very short time, and for the first 20 years, it was awful. It is only recently that modern tooling has been added to the language, but all the old stuff is still there. 

<break>
<p>JavaScript is probably the most hated programming language on the planet.  It invites bugs. It is hard to write, hard to read, and hard to maintain. Most of the language is quite horrible. New stuff has been added to JavaScript continuously, but none of the old stuff has ever been removed. 


<p>The good news is that the new stuff added to JavaScript is quite nice, and more new stuff is coming. The ^ES6^ version (sometimes called ^ES2015^) provided a much-needed upgrade after 20 years, making JavaScript into an almost-modern language. Since then, yearly upgrades have addressed the worst pain-points, especially asynchronous programming and multi-processor support. 

<p>The latest release, ^ES2020^ adds big integers and [other stuff | other stuff | https://www.freecodecamp.org/news/javascript-new-features-es2020/]. 


<break>
<p>So we are going to focus on the nice parts of JavaScript. We'll tell you about the older stuff because you will see old code everywhere and otherwise you won't understand what you are looking at.  
<p(img=typescript.png)>
And we are going to use an extended flavor of JavaScript called [TypeScript|Type Script|https://www.typescriptlang.org/].  TypeScript helps catch mistakes early through a type system, and is well supported in the modern tooling we are going to encourage you to use.
























<break>
<p(img=radius.jpg)>The image on the right is what you should see using Chrome.  It will be slightly different in Firefox and Microsoft Edge. If you are using another browser, then download Chrome from [<a href="https://www.google.com/chrome">https://www.google.com/chrome</a>|w w w dot google dot com] and try again.  If you have trouble, stop and get help.  You should not go on until you have a console open.

<subtitle> this is a subtitle
<p>Welcome.  This is the first lesson, the first step on a long but wonderful journey.

<p>We start every lesson by telling you what we hope you will learn. It is good to check back and ask yourself what you have actually learned, and we're going to help you do that.

<p>This lesson will tell you about a computer language that we are going to use, called 'JavaScript'.  We are going to look at the basic types of data that we can handle, and then write some simple programs.

<break>

<p(science)>Hi. I'm Science.  I'm going to pop up and tell you about the history of computing. The reason we do things in certain ways is often because of the path we took.

<p(science)>Here's a fun example - did you ever wonder why your keyboard is so
confused and hard to use, why the keys aren't just A-B-C-D? It's because the earliest mechanical typewriters were very slow, and would jam if the operator went too fast.  So the designers intentionally designed the keyboard to slow down the operators. Here's more information.

<break>
<p(history)>Hi. I'm History.  New stuff has been added to JavaScript continuously, but none of the old stuff has ever been removed.  So much of the language is like a decrepit old amusement park.

<p(history)>I'm hoping you will continue programming JavaScript, but as you look at resorces on the web, you will not understand what you are seeing.

<break>

<p(mindset)>Hi. I'm Mindset.
<break>

<p>All _values_ are made of the same kinds of bits, but they don't all behave the same.  Every _value_ has a _type_ that determines its role.  Some values are numbers, some are letters, and some are instructions.   Values are the building blocks of Javascript programs.

<p>This chapter introduces two simple value types _Number_ and _Boolean_, and some operators you can use with them.


<subtitle>Numbers


<p>The simplest type is _Number_  which are just numbers. In a JavaScript program, they are written like this:

<code(noedit)>
13
9.81

<p>We use _Number_s for counting, and sometimes for arithmetic. We can add, subtract, multiply and divide number values and produce a new number value.

<p>But first we're going to show you a neat trick.  You can run a small Javascript program right on this page.  Click on the `console.log( 2 + 2 )` below, and it will turn into a program.  Press CTRL+ENTER to run the program.  Try it now.

<code(vt52)>
console.log(2 + 2)
function a(b){
    return(b+5)
}
<p>`console.log( )` is a function that prints the value between the two brackets.  Please try each of these little programs.  Try modifying them.  Can you calculate the value of 2 + 2 + 2?

