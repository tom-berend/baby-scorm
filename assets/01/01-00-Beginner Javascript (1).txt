<module>01-Beginner Javascript
<lesson>00-Information about this course
<shortdesc>This is the first lesson of the first module, and we cover some housekeeping.  You will start programming in the second lesson.

<p> first line?   this is _emp_ text (underscore).   this is ^bold^ text. (caret)  this is `code` text. (backtick)   this is <key>ctrl+k</key> text  < key > ctrl+k < / key > 

<break>









<title>Welcome to GameCode

<run(src=logo.ts)>

<p(video=intro.webm)>Everyone dreams of writing video games. It's a great hobby, and maybe even a and maybe even a career. But there is a lot to learn.  So we wrote this course.

<p>There are already many great courses to help you learn.  This one is a bit different.  We are going to teach you high school math and physics, except you won't notice because we are teaching you how to write video games.







<break>
<p>Here's the thing. Writing a serious game takes serious math and programming skills.  There's no shortcut.  

<p>Video games are built on math and physics. Computer graphics rely on algebra, functions, vectors, matrices, trigonometry, and more.  Making movements look realistic needs physics, and that means some calculus.

<p>Game _design_ adds another layer. Making a game fun and engaging requires many of the disciplines of system engineering, such as probability, communications, and feedback.  






<break>
<p> So we wrote a programming course that teaches you math, physics, and programming.  We will cover most of the math and physics you need for grades 10 and 11. We will teach you some serious programming skills. And we will show you how to use the editors and compilers that programmers use.






<subtitle>JavaScript
<p>Many 'Learn to Code' camps use drag-and-drop "toy" languages like Scratch or [GameMaker|Game Maker|https://www.yoyogames.com/gamemaker].  We believe that young programmers are capable of much more.  We find passion and energy in ^Making Great Things^, but that requires real tools and real learning.

<p(img=typescript.png)>
There are many programming languages because each is good at different things.  The language we will be working with is called [JavaScript|JavaScript|https://developer.mozilla.org/en-US/docs/Web/JavaScript]. Specifically, we will use an extended flavor of JavaScript called [TypeScript|Type Script|https://www.typescriptlang.org/].
<break>
<p> JavaScript is particularly good for writing web-based programs and is running every web page you visit.  It is also used for connected smart devices - the "Internet of Things" (IOT) and is embedded in devices around you.







<subtitle>BabylonJS
<p(img=babylonlogo.png)>
We are going to use the awesome 
[BabylonJS| Babylon J S|https://www.babylonjs.com] rendering engine.  Best-in-class graphics, performance, and tools. Supports the latest WebGL, WebGPU, WebXR, WebAudio, etc.
Check it out!
<p>Babylon is a sprawling empire, but it takes a long time to learn, even for experts with the math skills of Star Fleet Navigators. You quickly get lost in the complexity and layers of possibilities, and sometimes never actually write a game.
<p>To understand why we wrote this course, check out this [beginner tutorial|beginner tutorial|https://doc.babylonjs.com/guidedLearning/createAGame] for creating a game on the Babylon site.  It might as well be written in Greek.
<p>We'll get you there, but in small steps.







<subtitle>About this course

<p>We are a ^Community of Learners^.  We are not a day-care or an after-school program. We learn at our own pace, following our own interests, choosing our own projects, for our own reasons.  We learn from each other and teach each other. We collaborate on projects, we follow our curiosity, and we experiment with new ideas. Click on the DISCORD button on the right to join our channel.

<p>If you are joining this course as part of a school course or as a cohort of learners, then you will be assigned a ^proctor^.  This module has a half-dozen lessons and several exercises, when you believe you have mastered them then you will chat with your proctor, share your code, and demonstrate your mastery.  Your proctor will then admit you into the next course.

When you have reached the end of these lessons, you will be ready to join the worldwide community of JavaScript programmers and game developers.  You will have the skills and confidence to continue learning with them. And of course, you will have written some awesome games.



<break>
<p>Feel free to invite your real-world friends.  Everything is totally free. 




<break>
<p(img=radius.jpg)>The image on the right is what you should see using Chrome.  It will be slightly different in Firefox and Microsoft Edge. If you are using another browser, then download Chrome from [<a href="https://www.google.com/chrome">https://www.google.com/chrome</a>|w w w dot google dot com] and try again.  If you have trouble, stop and get help.  You should not go on until you have a console open.

<subtitle> this is a subtitle
<p>Welcome.  This is the first lesson, the first step on a long but wonderful journey.

<p>We start every lesson by telling you what we hope you will learn. It is good to check back and ask yourself what you have actually learned, and we're going to help you do that.

<p>This lesson will tell you about a computer language that we are going to use, called 'JavaScript'.  We are going to look at the basic types of data that we can handle, and then write some simple programs.

<break>

<p(science)>Hi. I'm Science.  I'm going to pop up and tell you about the history of computing. The reason we do things in certain ways is often because of the path we took.

<p(science)>Here's a fun example - did you ever wonder why your keyboard is so
confused and hard to use, why the keys aren't just A-B-C-D? It's because the earliest mechanical typewriters were very slow, and would jam if the operator went too fast.  So the designers intentionally designed the keyboard to slow down the operators. Here's more information.

<break>
<p(history)>Hi. I'm History.  New stuff has been added to JavaScript continuously, but none of the old stuff has ever been removed.  So much of the language is like a decrepit old amusement park.

<p(history)>I'm hoping you will continue programming JavaScript, but as you look at resorces on the web, you will not understand what you are seeing.

<break>

<p(mindset)>Hi. I'm Mindset.
<break>

<p>All _values_ are made of the same kinds of bits, but they don't all behave the same.  Every _value_ has a _type_ that determines its role.  Some values are numbers, some are letters, and some are instructions.   Values are the building blocks of Javascript programs.

<p>This chapter introduces two simple value types _Number_ and _Boolean_, and some operators you can use with them.


<subtitle>Numbers


<p>The simplest type is _Number_  which are just numbers. In a JavaScript program, they are written like this:

<code(noedit)>
13
9.81

<p>We use _Number_s for counting, and sometimes for arithmetic. We can add, subtract, multiply and divide number values and produce a new number value.

<p>But first we're going to show you a neat trick.  You can run a small Javascript program right on this page.  Click on the `console.log( 2 + 2 )` below, and it will turn into a program.  Press CTRL+ENTER to run the program.  Try it now.

<code(vt52)>
console.log(2 + 2)
function a(b){
    return(b+5)
}
<p>`console.log( )` is a function that prints the value between the two brackets.  Please try each of these little programs.  Try modifying them.  Can you calculate the value of 2 + 2 + 2?

